# Name of the workflow displayed in the GitHub Actions tab
name: Node.js CI/CD with Docker

# Defines the events that trigger the workflow
on:
  push:
    branches:
      - main
    # Triggers workflow when code is pushed to the main branch
  pull_request:
    branches:
      - main
    # Triggers workflow when a pull request targets the main branch

# Defines the jobs to be executed
jobs:
  test:
    # Specifies the runner environment
    runs-on: ubuntu-latest
    # Uses the latest Ubuntu runner provided by GitHub for Docker compatibility

    # Defines the matrix strategy for running jobs across multiple Node.js versions
    strategy:
      matrix:
        node-version: [ 18, 20]
        # Runs the job for each major Node.js version, using node:${{ matrix.node-version }}-alpine
      fail-fast: false
      # Continues running other matrix jobs even if one fails, ensuring full compatibility report

    # Name of the job, dynamically includes the Node.js version
    name: Test on Node.js ${{ matrix.node-version }} with Docker

    # Steps to execute within the job
    steps:
      # Checks out the repository code
      - name: Checkout code
        uses: actions/checkout@v3
        # Clones the repository to the runner, making project files and Dockerfile available

      # Sets up Docker Buildx for building multi-platform images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # Configures Buildx for efficient Docker image building

      # Builds the Docker image for the specified Node.js version
      - name: Build Docker image
        run: |
          docker build --build-arg NODE_VERSION=${{ matrix.node-version }} -t nodejs-express-ci-app:${{ matrix.node-version }} .
        # Builds the Docker image using the Dockerfile, passing the matrix Node.js version as a build argument
        # Tags the image with the Node.js version for identification

      # Runs tests inside the Docker container
      - name: Run tests in Docker
        run: |
          docker run --rm nodejs-express-ci-app:${{ matrix.node-version }} npm test
        # Executes the test suite inside the container using 'npm test'
        # '--rm' ensures the container is removed after execution to save resources

  deploy:
    # Specifies the runner environment
    runs-on: ubuntu-latest
    # Uses the latest Ubuntu runner for deployment tasks

    # Ensures the deployment job runs only after tests pass
    needs: test
    # Depends on the 'test' job to ensure code is tested before deployment

    # Runs deployment only for pushes to the main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # Restricts deployment to main branch pushes to prevent accidental deployments

    # Name of the deployment job
    name: Deploy to AWS EC2

    # Steps to execute within the deployment job
    steps:
      # Checks out the repository code
      - name: Checkout code
        uses: actions/checkout@v3
        # Clones the repository to access the Dockerfile and project files

      # Sets up Docker Buildx for building the deployment image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # Configures Buildx for building the Docker image for deployment

      # Logs in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        # Authenticates with Docker Hub using secrets to allow image pushing

      # Builds and pushes the Docker image for Node.js 16
      - name: Build and push Docker image
        run: |
          docker build --build-arg NODE_VERSION=16 -t ${{ secrets.DOCKER_USERNAME }}/nodejs-express-ci-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/nodejs-express-ci-app:latest
        # Builds the Docker image for Node.js 16 and pushes it to Docker Hub
        # Uses 'latest' tag for simplicity; specific tags can be used if needed

      # Deploys to EC2 via SSH
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          echo "$EC2_SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_HOST << 'EOF'
            # Log in to Docker Hub on EC2
            docker login -u $DOCKER_USERNAME -p ${{ secrets.DOCKER_PASSWORD }}
            # Stop and remove existing container if running
            docker stop node-app || true
            docker rm node-app || true
            # Pull the latest image
            docker pull $DOCKER_USERNAME/nodejs-express-ci-app:latest
            # Run the new container
            docker run -d --name node-app -p 3000:3000 $DOCKER_USERNAME/nodejs-express-ci-app:latest
            # Clean up unused images
            docker image prune -f
          EOF
          rm private_key.pem
        # Connects to the EC2 instance via SSH, pulls the latest Docker image, and runs the container
        # Removes old container and cleans up unused images to save space